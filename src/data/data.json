[
    {
        "title": "Commit messages saves life",
        "brief": "Yes, you read that right. Self explained commit messages saves time, therefore saves life.\nWhat is a commit message?\nA commit message literally tells what a line of code (either new or updated code) does.\n\nA commit message explains what change you ma...",
        "slug": "commit-messages-saves-life",
        "dateAdded": "2022-08-02T18:51:36.832Z",
        "partOfPublication": true,
        "contentMarkdown": "Yes, you read that right. Self explained commit messages saves time, therefore saves life.\n\n## What is a commit message?\n\nA commit message literally tells what a line of code (either new or updated code) does.\n\n>A commit message explains what change you made to your project. It is greatly important to learn how to make a good commit message no matter if it is a personal or professional project.\n\n## Why do we have commit messages?\n\nIt is important to know that commit messages are not just â€˜messagesâ€™ but does work as documentation. \n\nCommit messages helps you document your progress of a feature or update and makes changes traceable in git. \n\nWriting understandable commit message is an empathetic way of  pushing your code. A well crafted commit message is a great way to communicate what change is made to a project so that other developers working on same have context of what is being updated and many times, your future self is at advantage.\n\n## How to write good commit messages\n\nDifferent teams have different conventions and approach to writing commit messages.\nFor clarity state, you may choose not to see this as a standard you must follow but best belief itâ€™s a good approach.\n\nIâ€™ve seen many developers write commit messages like `git commit -m 'made update'`, what update did you make?  :)\n\nLet's take a look at some approach to follow when writing commit messages.\n\nWhen writing your commit message;\n\n- Make it clear and self explanatory.\n- Do not assume your code is explainable to all.\n- State the commit message type e.g. feat, refactor, test etc..\n- Should be short and ideally not more than 50 characters.\n- Do not end the commit message with a period (.).\n- Remove unnecessary extra characters.\n- Adhere to your team commit message convention.\n\n## A basic Example\n\n`feat: add new function to export csv file`\n\n`feat: update input field validation mixin to check for whitespace`\n\n## Conclusion\n\nWhen writing your commit messages, try to be empathetic about it and never assume your code is explainable to all, you might be saving a developer hours of trying to understand a code block.\n\nThank you for reading.ðŸ¤©\n\n\n",
        "cuid": "cl6cjdxjl01gpfvnv3abnbzmk",
        "coverImage": "https://cdn.hashnode.com/res/hashnode/image/upload/v1659466114783/JO4khJ7_b.png"
    },
    {
        "title": "How to Configure your Vue 3 app to use Tailwind CSS",
        "brief": "What is Tailwind CSS?\nWhat tailwind does is to give you predefined classes to easily layout your application pages and also style elements across your application.\n\nTailwind CSS is basically a utility-first CSS framework for rapidly building custom u...",
        "slug": "how-to-configure-your-vue-3-app-to-use-tailwind-css",
        "dateAdded": "2022-07-28T08:54:31.002Z",
        "partOfPublication": true,
        "contentMarkdown": "#### What is Tailwind CSS?\n\nWhat tailwind does is to give you predefined classes to easily layout your application pages and also style elements across your application.\n\n> Tailwind CSS is basically a utility-first CSS framework for rapidly building custom user interfaces. It is a highly customizable, low-level CSS framework that gives you all of the building blocks you need to build bespoke designs without any annoying opinionated styles you have to fight to override.\n\nNow, let's proceed to creating our application.\n#### Create a Vue 3 App\nCreate your vue 3 application by running this command in the terminal:\n\n```\nnpm init vite my-app\n```\nChange directory into your project folder:\n\n```\ncd my-app\n```\n\n#### Install Tailwind CSS\n\nNext we install tailwind css and its dependencies:\n\n```\nnpm install -D tailwindcss postcss autoprefixer\n```\nNext we need to create two files namely `tailwind.config.js` and `postcss.config.js` with the following command\n\n```\nnpx tailwindcss init -p\n```\n\n#### Add template files path to tailwind\nNext we need to add the the path of all our template files to the `tailwind.config.js` file. In your content array `content: []`, paste in the following code between the array block:\n\n```\n\"./index.html\",\n    \"./src/**/*.{vue,js,ts,jsx,tsx}\",\n```\n\nYour `tailwind.config.js` file should look like this:\n```\n/** @type {import('tailwindcss').Config} */\nmodule.exports = {\n  content: [\n    \"./index.html\",\n    \"./src/**/*.{vue,js,ts,jsx,tsx}\",\n  ],\n  theme: {\n    extend: {},\n  },\n  plugins: [],\n}\n```\n\n#### Add tailwind directive your CSS\nCreate a index.css file in your `src` folder and add the @tailwind directives for each of Tailwindâ€™s layers.\n\n ```\n// ./src/index.css\n@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n```\n\nImport the newly created `index.css` file in your `main.js` file:\n```\nimport './index.css'\n```\n\n#### Run your project server\nNow we are ready to serve our project:\n```\nnpm run dev\n```\n\n#### Start using tailwind css in your app\nReplace the `App.vue` file with the following code to see tailwind in action:\n\n```\n//App.vue\n<template>\n  <div>\n    <h1 class=\"text-green-500 text-3xl\">This is a taiwind app</h1>\n    <button class=\"bg-sky-600 hover:bg-sky-700 text-white p-3 rounded-2xl\">\n      My Tailwind styled button\n    </button>\n  </div>\n</template>\n```\n\n#### Replace project default css\n\nAlso, replace the styles in `style.css` to overwrite the default css that came with our vue app setup:\n\n```\n// ./src/style.css\n* {\n  margin: 0;\n  padding: 0;\n  box-sizing: border-box;\n}\n```\n\nYou can find the working app here [here on github](https://github.com/adisamicheal/vue3-tailwind-template).\n\nTada! You have tailwind css working with your vue 3 app. Go ahead and build greatness!\n\n\n\n\n\n\n\n\n\n\n\n\n",
        "cuid": "cl64susvy03y02snvh58d3z6x",
        "coverImage": "https://cdn.hashnode.com/res/hashnode/image/upload/v1658998304579/fmChgJkGN.png"
    },
    {
        "title": "How to conditionally pass a key to a javascript Object",
        "brief": "Javascript Object is an unordered collection of key and value pairs, these key and value pairs are called a property. The key can be a string and the value of the property can be any value.\nThere could be an instance where you only want to pass a key...",
        "slug": "how-to-conditionally-pass-a-key-to-a-javascript-object",
        "dateAdded": "2022-07-23T11:52:28.902Z",
        "partOfPublication": true,
        "contentMarkdown": "Javascript Object is an unordered collection of key and value pairs, these key and value pairs are called a property. The key can be a string and the value of the property can be any value.\n\nThere could be an instance where you only want to pass a key to an object only when it has a value so as not to encounter an error for instance when interacting with an api.\n\n**Scenario**: You have an api that expects a payload of:\n\n```\n{\n  name: \"Micheal\"\n  email: \"micheal@micheal.co\"\n  phone: \"+23400000000\"\n  blog_site: \"https://michellead.hasnode.dev\"\n}\n```\nfor some reason, if your `blog_site` value is null and you want to omit it, here is a way to go about it:\n\n```\nconst personDetails = {\n  name: \"Micheal\",\n  email: \"micheal@micheal.co\",\n  phone: \"+23400000000\",\n  blog_site: null\n}\n\nconst payload = {\n  name: personDetails.name,\n  email: personDetails.email,\n  phone: personDetails.phone,\n  ...(personDetails.blog_site && {\n    blog_site: personDetails.blog_site\n  })\n };\n\nconsole.log(payload) //{ name: 'Micheal', email: 'micheal@micheal.co', phone: '+23400000000' }\n``` \n\nThe above checks if the `personDetails.blog_site` key has a value which is `null` or `undefined` and removes it from the payload.\n\nI hope with this, you can see how the conditionally pass a key and value pair to an object.\nThanks for reading! ðŸ™‚",
        "cuid": "cl5xu0emk04onzxnv36wo8f6q",
        "coverImage": "https://cdn.hashnode.com/res/hashnode/image/upload/v1658577078397/drQmijIDl.png"
    },
    {
        "title": "Javascript Promises",
        "brief": "What is a Promise?\nA promise is an object that has the potential to generate a single value in the future; either a resolved value or an explanation why it hasn't been resolved yet (a network error is a good example ).\nIn its simplest from, a promise...",
        "slug": "javascript-promises",
        "dateAdded": "2021-07-21T13:16:52.256Z",
        "partOfPublication": true,
        "contentMarkdown": "### What is a Promise?\n\nA promise is an object that has the potential to generate a single value in the future; either a resolved value or an explanation why it hasn't been resolved yet (a network error is a good example ).\n\nIn its simplest from, a promise is a result of an asynchronous operation. *Note that a promise can have an eventual successful completion or failure.*\n\nThe constructor syntax for a promise object is:\n\n\n```\nlet promise = new Promise(function(resolve, reject) {\n  // executor\n});\n``` \nThe executor (in the above code snippet) is the function that is supplied to the new Promise. The executor starts automatically when a new Promise is created.\n\n\n\n#### Take a look at this Scenario...\n\nSuppose you decide (promise) to complete a course over a period of time. Meanwhile time is relative, as you may and may not finish within the specified time. If you finish the course over the period of time, then the promise is resolved. If not, the promise is rejected.\n\nLet's put our thought process (scenario) into code...\n\n\n```\nlet courseCompleted = true;\n\nlet learnCourse = new Promise(function (resolve, reject) {\n    if (courseCompleted) {\n        resolve(\"I have completed learning this course.\");\n    } else {\n        reject(\"I haven't completed learning this course yet.\");\n    }\n});\n``` \n\nThe above code snippet is a promise. A promise is simply the result of an asynchronous operation.\n\n> A pending promise can either be fulfilled with a value or rejected with a reason (error). When either of these options happens, the associated handlers queued up by a promise's then method are called. If the promise has already been fulfilled or rejected when a corresponding handler is attached, the handler will be called, so there is no race condition between an asynchronous operation completing and its handlers being attached. - MDN\n\n\n### States of Javascript Promise\nA promise has three common states, which are;\n\n1. ***Pending*** (not yet fulfilled or rejected) - \nThis is the initial state of a promise call, at this point the promise is still in a process of call. It is neither fulfilled (successful) nor rejected (failed).\n\n2. ***Fulfilled -***\nThis means that the process or operation has been finished successfully. Here, the resolve() function is used. The activity relating to the promise was successful in this case.\n\n3. ***Rejected -***\nA promise is rejected when an operation fails. With reference to our scenario above, the learnCourse function will fail if the time factor is not met. Here, you tried but the external circumstances (time) didn't work out as planned. The reject() function is called here.\n\n### Conclusion\n\nThere are a lot more to cover on *Javascript promises*, but this little blog post of mine can't extensively cover it all. I hope you definitely got something from this, thanks for your time.\n",
        "cuid": "ckrdifaxo0cn491s11q7n5zno",
        "coverImage": "https://cdn.hashnode.com/res/hashnode/image/upload/v1626873386832/ap5_OIGkj.png"
    },
    {
        "title": "String To Array In Javascript",
        "brief": "Javascript is a widespread used technology for finding solutions to problems. At one point or the other in our problem solving process, we need to manipulate data to achieve a goal. \nHere we want to convert a string to an array.\nWhat is a string?\nA s...",
        "slug": "string-to-array-in-javascript",
        "dateAdded": "2021-04-07T13:33:05.426Z",
        "partOfPublication": true,
        "contentMarkdown": "Javascript is a widespread used technology for finding solutions to problems. At one point or the other in our problem solving process, we need to manipulate data to achieve a goal. \nHere we want to convert a string to an array.\n\n### What is a string?\n\nA string is a series of characters like alphabets, number, special characters etc. A string is enclosed in a quote, either single quotes or double quotes.\n\n### What is an array?\n\nAn array is identified by the box-bracket [ ]. An array can enclose a set of strings or numbers as the case may be. It is used to store different elements.\n\n### How do we convert a string to an Array in Javascript?**\n\nThere are four 'well-known' approach to achieve this. Which are;\n1. The javascript Array.from method\n2. Split method\n3. Object.assign method\n4. Spread operator\n\nLet's declare a string as an example here;\n\n```\nconst string = 'word'; \n```\n\n\n1. Array.from method: The Array from method is a javascript method used to convert a string to an array. It let's you shallow-copied Array instance from an array-like or iterable object.\n\n   The syntax is `Array.from(string);`\n   \n   *string: is the declared const string above.*\n\n2. Split method: The Javascript split method divides a String into an ordered list of substrings and put's it in an array-like structure\n\n    The syntax is `string.split('');`\n\n    *string: is the declared const string above.*\n\n3. Object.assign method: This takes in two values which is the and empty array and the declared string.\n\n     The syntax is `Object.assign([], string);`\n\n4. Spread operator: This is commonly used to make shallow copies of Javascript objects. It takes in an iterable object and expands it into individual elements. \n\n   The syntax is `[...string];`\n\n   *string: is the declared const string above.*\n\n\n\n\nThe above approaches results in :\n\n```\n// ['w', 'o', 'r', 'd']\n```\n\n### Conclusion\n\nIn conclusion, it is important to note that converting an empty string to an array results in an empty array.\nYou can try it out in your browser console or any terminal that runs Javascript codes.",
        "cuid": "ckn7hrpsd028l7ts17xns6q0x",
        "coverImage": "https://cdn.hashnode.com/res/hashnode/image/upload/v1617802363532/89vQn1y8G.jpeg"
    }
]